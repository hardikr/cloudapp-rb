#!/usr/bin/env ruby
#
# cloudapp
# Added a feature to email the file as link by Hardik Ruparel / @hardikr
# Forked from Aashay Desai / @aashay
# Original by Zach Holman / @holman
#
# Uploads a file from the command line to CloudApp, drops it into your clipboard. You can also email a link to the file to any recipient.
#
# Example:
#
#   cloudapp drunk-blake.png
#   cloudapp drubk-blake.png john@doe.com
#
# 
# Requires you set your CloudApp (and possibly GMail) credentials in ~/.cloudapp and ~/.gmail as a simple config file:
#
#   email
#   password
# 
# For full instructions, and license information check out the readme at https://github.com/hardikr/cloudapp-rb#readme
#

require 'rubygems'
begin
  require 'cloudapp_api'
  require 'gmail'
rescue LoadError
  puts "You need to install cloudapp_api: gem install cloudapp_api"
  exit!(1)
end

config_file = "#{ENV['HOME']}/.cloudapp"
unless File.exist?(config_file)
  puts "You need to type your email and password (one per line) into "+
       "`~/.cloudapp`"
  exit!(1)
end

email,password = File.read(config_file).split("\n")

class HTTParty::Response
  # Apparently HTTPOK.ok? IS NOT OKAY WTFFFFFFFFFFUUUUUUUUUUUUUU
  # LETS MONKEY PATCH IT I FEEL OKAY ABOUT IT
  def ok? ; true end
end

if ARGV[0].nil?
   puts "You need to specify a file to upload."
   exit!(1)
end
  
class Copier
    class << self
      # Public: tests if currently running on darwin.
      #
      # Returns true if running on darwin (MacOS X), else false
      def darwin?
        !!(RUBY_PLATFORM =~ /darwin/)
      end

      # Public: tests if currently running on windows.
      #
      # Apparently Windows RUBY_PLATFORM can be 'win32' or 'mingw32'
      #
      # Returns true if running on windows (win32/mingw32), else false
      def windows?
        !!(RUBY_PLATFORM =~ /win|mingw/)
      end

      # Public: returns the command used to copy a url to the
      # clipboard for the current platform.
      #
      # Returns a String with the bin
      def copy_command
        if darwin?
          'pbcopy'
        elsif windows?
          'clip'
        else
          'xclip -selection clipboard'
        end
      end
          
      # Public: copies a given url to the clipboard. 
      # This _should_ work in any POSIX environment and also windows,
      # since they both have echo commands.  I think.  Maybe? I dunno.
      #
      # Returns nothing.
      def copy(url)    
          system("echo #{url} | #{copy_command}")
      end
    end
end

puts "Connecting to CloudApp..."

CloudApp.authenticate(email,password)
url = CloudApp::Item.create(:upload, {:file => ARGV[0]}).url

# Say it for good measure.
puts "Uploaded to #{url}..."

# Get the embed link.
urlnew = "#{url}/#{ARGV[0].split('/').last}"

# Copy it to your clipboard.
Copier::copy(url)
puts "URL copied to clipboard, Enjoy! "

unless ARGV[1].nil?

  gconfig_file = "#{ENV['HOME']}/.gmail"
  unless File.exist?(config_file)
    puts "You need to type your email and password (one per line) into " + "`~/.gmail`"
    exit!(1)
  end
  
  gusername,gpassword = File.read(gconfig_file).split("\n")

  Gmail.new(gusername, gpassword) do |gmail|
    gmail.deliver do
      to ARGV[1]
      subject "Here's the file you requested!"
      html_part do
        body "Click the link below to view/download the file: \n" + url
      end
    end
  end
end